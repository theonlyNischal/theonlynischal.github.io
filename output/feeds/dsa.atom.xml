<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog - DSA</title><link href="/" rel="alternate"></link><link href="/feeds/dsa.atom.xml" rel="self"></link><id>/</id><updated>2018-04-13T00:00:00+00:00</updated><entry><title>Conversion of Infix, Postfix, Prefix Expressions Using Stack</title><link href="/conversion-of-infix-postfix-prefix-expressions-using-stack.html" rel="alternate"></link><published>2018-04-13T00:00:00+00:00</published><updated>2018-04-13T00:00:00+00:00</updated><author><name></name></author><id>tag:None,2018-04-13:/conversion-of-infix-postfix-prefix-expressions-using-stack.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Conversion of Infix, Postfix, Prefix Expressions Using Stack&lt;/h2&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Conversion of Infix, Postfix, Prefix Expressions Using Stack&lt;/h2&gt;
&lt;/div&gt;
</content></entry><entry><title>Introduction to Infix, Postfix and Prefix Expressions</title><link href="/introduction-to-infix-postfix-and-prefix-expressions.html" rel="alternate"></link><published>2018-04-12T00:00:00+00:00</published><updated>2018-04-12T00:00:00+00:00</updated><author><name></name></author><id>tag:None,2018-04-12:/introduction-to-infix-postfix-and-prefix-expressions.html</id><summary type="html">&lt;div class="section" id="introduction-to-infix-postfix-and-prefix-expressions-in-data-structures"&gt;
&lt;h2&gt;Introduction to Infix, Postfix and Prefix Expressions in Data Structures&lt;/h2&gt;
&lt;div class="section" id="infix-expressions"&gt;
&lt;h3&gt;Infix Expressions&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="prefix-expressions"&gt;
&lt;h3&gt;Prefix Expressions&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="postfix-expressions"&gt;
&lt;h3&gt;Postfix Expressions&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="introduction-to-infix-postfix-and-prefix-expressions-in-data-structures"&gt;
&lt;h2&gt;Introduction to Infix, Postfix and Prefix Expressions in Data Structures&lt;/h2&gt;
&lt;div class="section" id="infix-expressions"&gt;
&lt;h3&gt;Infix Expressions&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="prefix-expressions"&gt;
&lt;h3&gt;Prefix Expressions&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="postfix-expressions"&gt;
&lt;h3&gt;Postfix Expressions&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>What is a Stack? LIFO in Stack and Real World Applications</title><link href="/what-is-a-stack.html" rel="alternate"></link><published>2018-04-12T00:00:00+00:00</published><updated>2018-04-12T00:00:00+00:00</updated><author><name></name></author><id>tag:None,2018-04-12:/what-is-a-stack.html</id><summary type="html">&lt;div class="section" id="what-is-a-stack"&gt;
&lt;h2&gt;What is a Stack?&lt;/h2&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="what-is-a-stack"&gt;
&lt;h2&gt;What is a Stack?&lt;/h2&gt;
&lt;/div&gt;
</content></entry><entry><title>Introduction to Abstract Data Types</title><link href="/introduction-to-abstract-data-types.html" rel="alternate"></link><published>2018-04-08T00:00:00+00:00</published><updated>2018-04-08T00:00:00+00:00</updated><author><name></name></author><id>tag:None,2018-04-08:/introduction-to-abstract-data-types.html</id><summary type="html">&lt;p&gt;Computer Scientists uses the concept of abstraction to manage the complexity of a system or a problem. By abstraction we mean, specifying &lt;strong&gt;what it does, but not How it does&lt;/strong&gt;. Applying the same concept of abstraction on the design of data structures give rise to abstract data types or ADTs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Computer Scientists uses the concept of abstraction to manage the complexity of a system or a problem. By abstraction we mean, specifying &lt;strong&gt;what it does, but not How it does&lt;/strong&gt;. Applying the same concept of abstraction on the design of data structures give rise to abstract data types or ADTs.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Abstract Data Type(ADT) is a mathematical model of a data structures that specify&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;types of data stored&lt;/li&gt;
&lt;li&gt;operations allowed on them&lt;/li&gt;
&lt;li&gt;types of parameters of operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Using ADT we are concerned only with what the data is representing and not with how the data will be constructed. Here, we are hiding the details of implementation from user's view(Information Hiding).&lt;/p&gt;
&lt;p&gt;Advantages of using ADTs:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Separates the logical and physical perspectives of data.&lt;/li&gt;
&lt;li&gt;Allows better modeling of real-world problems.&lt;/li&gt;
&lt;li&gt;Enhance the robustness of the system.&lt;/li&gt;
&lt;li&gt;Since ADTs clusters the operations and the representation of attributes, it captures the semantics of the type very well.&lt;/li&gt;
&lt;/ol&gt;
</content></entry><entry><title>Array Fundamentals</title><link href="/array-fundamentals.html" rel="alternate"></link><published>2018-04-01T00:00:00+00:00</published><updated>2018-04-01T00:00:00+00:00</updated><author><name></name></author><id>tag:None,2018-04-01:/array-fundamentals.html</id><summary type="html">&lt;div class="section" id="what-is-an-array"&gt;
&lt;h2&gt;What is an Array?&lt;/h2&gt;
&lt;p&gt;An array is a &lt;a class="reference external" href="http://nischal.info.np/what-is-data-structure"&gt;Data Structure&lt;/a&gt;  consisting of a collection of variables of the same type organized under one name.&lt;/p&gt;
&lt;p&gt;In C/C++/Java,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
int my_array[] = {1, 2, 3, 4, 5};
&lt;/pre&gt;
&lt;p&gt;Here different integers are collected under one name my_array. This type of Data Structure is …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="what-is-an-array"&gt;
&lt;h2&gt;What is an Array?&lt;/h2&gt;
&lt;p&gt;An array is a &lt;a class="reference external" href="http://nischal.info.np/what-is-data-structure"&gt;Data Structure&lt;/a&gt;  consisting of a collection of variables of the same type organized under one name.&lt;/p&gt;
&lt;p&gt;In C/C++/Java,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
int my_array[] = {1, 2, 3, 4, 5};
&lt;/pre&gt;
&lt;p&gt;Here different integers are collected under one name my_array. This type of Data Structure is an array.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Classification of Data Structures</title><link href="/classification-of-data-structures.html" rel="alternate"></link><published>2018-03-30T12:25:00+00:00</published><updated>2018-03-30T12:25:00+00:00</updated><author><name></name></author><id>tag:None,2018-03-30:/classification-of-data-structures.html</id><summary type="html"></summary><content type="html">&lt;blockquote class="epigraph"&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Bad programmers worry about the code. Good programmers worry about data structures and their relationships.&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Linus Torvalds&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nischal.info.np/what-is-data-structure.html"&gt;A Data Structure, as the name suggests, is a method to store data in a structured way so that it can be easily created, viewed, and managed.&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="how-do-we-classify-data-structures"&gt;
&lt;h2&gt;How do we classify data structures?&lt;/h2&gt;
&lt;p&gt;Data Structures are generally classified into two classes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Primitive Data Structures&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-primitive Data Structures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="primitive-data-structures"&gt;
&lt;h3&gt;Primitive Data Structures&lt;/h3&gt;
&lt;p&gt;Primitive Data Structures are the fundamental data types which are supported by programming language.
Examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Integer&lt;/li&gt;
&lt;li&gt;Real(float)&lt;/li&gt;
&lt;li&gt;Characters&lt;/li&gt;
&lt;li&gt;Booleans&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="non-primitive-data-structures"&gt;
&lt;h3&gt;Non-Primitive Data Structures&lt;/h3&gt;
&lt;p&gt;Non-primitive Data Structures are created using primitive data structures. These Data Structures can be designed by users. Examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Graphs&lt;/li&gt;
&lt;li&gt;Stacks&lt;/li&gt;
&lt;li&gt;Trees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Non-Primitive Data Structures can further be classified into two categories:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Linear Data Structures&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-Linear Data Structures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="linear-data-structures"&gt;
&lt;h3&gt;Linear Data Structures&lt;/h3&gt;
&lt;p&gt;In a Linear Data Structure, the elements of Data Structure are stored in a linear or sequential order. Examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Linked Lists&lt;/li&gt;
&lt;li&gt;Stacks&lt;/li&gt;
&lt;li&gt;Queues&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="non-linear-data-structures"&gt;
&lt;h3&gt;Non-Linear Data Structures&lt;/h3&gt;
&lt;p&gt;If the elements of a Data Structure are not stored in a sequential order, then it is a Non-Linear Data Structure. Examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Trees&lt;/li&gt;
&lt;li&gt;Graphs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>What is Data Structure? Why should I care about Data Structure?</title><link href="/what-is-data-structure.html" rel="alternate"></link><published>2018-03-28T10:28:00+00:00</published><updated>2018-03-28T10:28:00+00:00</updated><author><name></name></author><id>tag:None,2018-03-28:/what-is-data-structure.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Over the past few decades, the speed of computers has tremendously increased. Computers nowadays can perform millions of instructions in a matter of seconds. But when the complexity of a problem increases we will no longer be in a position to ignore the performance of the computer and, How data is stored in the computer directly affects its performance. So, for the better performance, we need a method to structure and organize data efficiently in a storage. This is where Data Structures came handy.&lt;/p&gt;
&lt;div class="section" id="what-is-data-structure"&gt;
&lt;h2&gt;What is Data Structure?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A Data Structure, as the name suggests, is a method to store data in a structured way so that it can be easily created, viewed, and managed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A one-liner definition may not be enough to explore Data Structures. So Let's take an example:&lt;/p&gt;
&lt;img alt="Example of Data Structure, Which shows 3 places uploaded by Nischal." class="img-responsive" src="./theme/img/DSA/data_structure_example.png" /&gt;
&lt;p&gt;The picture above shows us a system of directional nature of 3 places. We can represent a different component of the system in a different way. Let's store all the possible paths of the system. For this we may simply use a list.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(Home, Office)&lt;/li&gt;
&lt;li&gt;(Home, Cafe)&lt;/li&gt;
&lt;li&gt;(Office, Home)&lt;/li&gt;
&lt;li&gt;(Office, Cafe)&lt;/li&gt;
&lt;li&gt;(Cafe, Home)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, we can go from Home to Office, Home to Cafe, Office to Cafe, Office to Home, Cafe to Home but not Cafe to Home. This is one of the ways to store the data of the system.&lt;/p&gt;
&lt;p&gt;We may also take any of the places on one side and list all the possible paths we can go from that point to remaining points on the next side. i.e&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="32%" /&gt;
&lt;col width="68%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Places&lt;/th&gt;
&lt;th class="head"&gt;Possible Route&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Home&lt;/td&gt;
&lt;td&gt;(Office, Cafe)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Office&lt;/td&gt;
&lt;td&gt;(Home, Cafe)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cafe&lt;/td&gt;
&lt;td&gt;(Home)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="why-should-i-care-about-data-structures"&gt;
&lt;h2&gt;Why should I care about Data Structures?&lt;/h2&gt;
&lt;p&gt;The above example shows that for any pieces of information there are multiple ways we can structure and store the data but all the options availaible to us may not be efficient and may result in poor performance. So, knowing about Data Structures allows to choose appropriate Data Structure for a specific job from which programmers can write efficient programs.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Algorithms One</title><link href="/algorithms-one.html" rel="alternate"></link><published>2018-03-23T18:35:00+00:00</published><updated>2018-03-23T18:35:00+00:00</updated><author><name></name></author><id>tag:None,2018-03-23:/algorithms-one.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.&lt;/p&gt;
</content><category term="Algorithms"></category><category term="First Algorithms"></category></entry><entry><title>Another Algorithms</title><link href="/another.html" rel="alternate"></link><published>2018-03-23T18:35:00+00:00</published><updated>2018-03-23T18:35:00+00:00</updated><author><name></name></author><id>tag:None,2018-03-23:/another.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.Hello World this is nischal.&lt;/p&gt;
</content></entry></feed>